package main

import (
	"encoding/json"
	"fmt"
	"github.com/pbnjay/memory"
	"gopkg.in/alecthomas/kingpin.v2"
	"log"
	"os"
	"runtime"
	"sort"
	"strings"
)

type Options map[string]*string
type Flags map[string]*bool

var options = Options{
	"memory": kingpin.Flag("memory",
		"Total system memory, in bytes. Will attempt to detect if unspecified").
		Short('m').
		Default(fmt.Sprintf("%d", memory.TotalMemory())).
		Envar("PGT_MEMORY").
		String(),
	"type": kingpin.Flag("type", fmt.Sprintf(
		"Database type, defaults to Mixed. Valid options are %s", strings.Join(DbTypes, ", "))).
		Short('t').
		Default("mixed").
		Envar("PGT_TYPE").
		String(),
	"cpu": kingpin.Flag("cpu",
		"Maximum number of processors used").
		Short('C').
		Envar("PGT_CPU").
		String(),
	"storage": kingpin.Flag("storage", fmt.Sprintf(
		"Database storage type, defaults to ssd. Valid options are %s", strings.Join(DbStorages, ", "))).
		Short('s').
		Default(DbStorages[0]).
		Envar("PGT_STORAGE").
		String(),
	"version": kingpin.Flag("version",
		"Major version number for target version of PostgreSQL to configure for.").
		Short('v').
		Default(DbVersions[1]).
		Envar("PGT_VERSION").
		String(),
	"platform": kingpin.Flag("platform", fmt.Sprintf(
		"Platform, valid options are %s. Use darwin for Mac OS X.", strings.Join(DbPlatforms, ", "))).
		Short('p').
		Default(runtime.GOOS).
		Envar("PGT_PLATFORM").
		String(),
	"connections": kingpin.Flag("connections",
		"Maximum number of expected connections, default depends on database type").
		Short('c').
		Envar("PGT_CONNECTIONS").
		String(),
}

var flags = Flags{
	"header": kingpin.Flag("header", "Hide header").Short('H').Envar("PGT_HEADER").Bool(),
	"json":   kingpin.Flag("json", "Json output").Short('J').Envar("PGT_JSON").Bool(),
}

var elog = log.New(os.Stderr, "", 0)

func (f Flags) Get(name string) bool {
	return *f[name]
}

func (o Options) GetOption(opt string) string {
	if opt == "type" || opt == "platform" {
		return strings.ToLower(*o[opt])
	}
	return *o[opt]
}

func (o Options) Parse() {
	kingpin.Parse()
}

func (o Options) Header() string {
	connection := o.GetOption("connections")
	if connection != "" {
		connection = fmt.Sprintf("# Connections num: %s\n", connection)
	}
	cpu := o.GetOption("cpu")
	if cpu != "" {
		cpu = fmt.Sprintf("# CPUs num: %s\n", cpu)
	}
	return fmt.Sprintf("\n"+
		"################################################################################\n"+
		"# Generated by PGoTune\n"+
		"# PostgreSQL version: %s\n"+
		"# Platform: %s\n"+
		"# Total memory: %s\n"+
		"%s"+
		"# DB type: %s\n"+
		"%s"+
		"# DB storage type: %s\n"+
		"################################################################################\n\n",
		o.GetOption("version"), o.GetOption("platform"), o.GetOption("memory"),
		cpu, o.GetOption("type"), connection, o.GetOption("storage"))
}

func toJson(stringMap map[string]string) (string, error) {
	j, err := json.MarshalIndent(stringMap, "", "    ")
	if err != nil {
		return "", err
	}
	return string(j), nil
}

func main() {
	kingpin.HelpFlag.Short('h')
	options.Parse()

	pgSettings, err := NewPGSettings(options.GetOption("type"), options.GetOption("version"),
		options.GetOption("platform"), options.GetOption("memory"), options.GetOption("connections"),
		options.GetOption("storage"), options.GetOption("cpu"))
	if err != nil {
		elog.Fatal(err)
	}

	settings := pgSettings.GetSettings()

	if flags.Get("json") {
		if j, err := toJson(settings); err != nil {
			elog.Fatal(err)
		} else {
			fmt.Println(j)
		}
	} else {
		if !flags.Get("header") {
			fmt.Printf("%s", options.Header())
		}

		keys := make([]string, 0, len(settings))
		for k := range pgSettings.GetSettings() {
			keys = append(keys, k)
		}
		sort.Strings(keys)

		for _, k := range keys {
			fmt.Printf("%s = %s\n", k, settings[k])
		}
	}
}
